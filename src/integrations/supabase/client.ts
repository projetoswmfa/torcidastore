// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ddydxrtqzmseqqsgvwml.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRkeWR4cnRxem1zZXFxc2d2d21sIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDUwOTI3NDUsImV4cCI6MjA2MDY2ODc0NX0.9YmfMwUElQmkbn8gNlKiYkkJrhww9EmLj-DVDpjq14Y";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

console.log("Inicializando cliente Supabase com URL:", SUPABASE_URL);

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Verificação rápida do cliente
try {
  console.log("Verificando conexão do Supabase...");
  supabase.auth.getSession()
    .then(({ data, error }) => {
      if (error) {
        console.error("Erro na verificação da sessão Supabase:", error.message);
      } else {
        console.log("Conectado ao Supabase. Sessão atual:", 
          data.session ? "Autenticado como " + data.session.user?.email : "Não autenticado");
        
        // Log adicional para debug
        if (data.session) {
          console.log("Detalhes da sessão:", {
            userId: data.session.user?.id,
            aud: data.session.user?.aud,
            role: data.session.user?.role,
            expiresAt: data.session.expires_at
          });

          // Verificar se o usuário é administrador
          void supabase
            .from('user_roles')
            .select('*')
            .eq('user_id', data.session.user?.id)
            .then(roleResult => {
              console.log("Verificação direta de user_roles:", roleResult.data);
              
              const isAdmin = roleResult.data && 
                             roleResult.data.length > 0 && 
                             roleResult.data.some(r => r.role === 'admin');
                             
              console.log("Usuário tem papel de admin:", isAdmin);
            })
            .catch(err => {
              console.error("Erro ao verificar roles do usuário:", err);
            });
        }
      }
    })
    .catch(e => {
      console.error("Erro na chamada para getSession:", e);
    });
} catch (err) {
  console.error("Erro ao inicializar cliente Supabase:", err);
}

// Setup auth listener
supabase.auth.onAuthStateChange((event, session) => {
  if (event === 'SIGNED_IN' && session) {
    // Update session
    console.log('Supabase Event: User signed in', session.user?.email);
    
    // Verificar roles após login
    if (session.user) {
      console.log("Verificando roles após login para:", session.user.id);
      void supabase
        .from('user_roles')
        .select('*')
        .eq('user_id', session.user.id)
        .then(roleResult => {
          console.log("Roles do usuário após login:", roleResult.data);
        })
        .catch(err => {
          console.error("Erro ao verificar roles após login:", err);
        });
    }
  } else if (event === 'SIGNED_OUT') {
    // Clear session
    console.log('Supabase Event: User signed out');
  } else if (event === 'TOKEN_REFRESHED') {
    console.log('Supabase Event: Token refreshed');
  } else {
    console.log('Supabase Event:', event);
  }
});